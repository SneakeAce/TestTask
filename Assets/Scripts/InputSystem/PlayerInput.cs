//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMoving"",
            ""id"": ""922d74bd-325f-41e6-b45a-a53169dbcc77"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""cc3703d8-d281-473e-af55-9aa549390898"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""41b30195-ae37-412d-ae10-f73286fbcac6"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerLooking"",
            ""id"": ""e58eda2f-6154-41ad-b980-9d9fa93c3c0a"",
            ""actions"": [
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""3b574b0b-6778-4b2e-9940-10a490552a10"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""209aca2e-c7f6-4419-b225-cffdd80585e4"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": ""Hold(duration=0.2,pressPoint=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TakingItem"",
            ""id"": ""1277ca4b-82ce-4878-9666-eb4b26ebc654"",
            ""actions"": [
                {
                    ""name"": ""PickItem"",
                    ""type"": ""Value"",
                    ""id"": ""078ab392-3860-46c5-a142-8fbf7cf9ce06"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6eec83de-41ef-461e-b219-7a8644cc2e15"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMoving
        m_PlayerMoving = asset.FindActionMap("PlayerMoving", throwIfNotFound: true);
        m_PlayerMoving_Move = m_PlayerMoving.FindAction("Move", throwIfNotFound: true);
        // PlayerLooking
        m_PlayerLooking = asset.FindActionMap("PlayerLooking", throwIfNotFound: true);
        m_PlayerLooking_LookAround = m_PlayerLooking.FindAction("LookAround", throwIfNotFound: true);
        // TakingItem
        m_TakingItem = asset.FindActionMap("TakingItem", throwIfNotFound: true);
        m_TakingItem_PickItem = m_TakingItem.FindAction("PickItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMoving
    private readonly InputActionMap m_PlayerMoving;
    private List<IPlayerMovingActions> m_PlayerMovingActionsCallbackInterfaces = new List<IPlayerMovingActions>();
    private readonly InputAction m_PlayerMoving_Move;
    public struct PlayerMovingActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMovingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerMoving_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMoving; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovingActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerMovingActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerMovingActions instance)
        {
            if (m_Wrapper.m_PlayerMovingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovingActions @PlayerMoving => new PlayerMovingActions(this);

    // PlayerLooking
    private readonly InputActionMap m_PlayerLooking;
    private List<IPlayerLookingActions> m_PlayerLookingActionsCallbackInterfaces = new List<IPlayerLookingActions>();
    private readonly InputAction m_PlayerLooking_LookAround;
    public struct PlayerLookingActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerLookingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LookAround => m_Wrapper.m_PlayerLooking_LookAround;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLooking; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLookingActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerLookingActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerLookingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerLookingActionsCallbackInterfaces.Add(instance);
            @LookAround.started += instance.OnLookAround;
            @LookAround.performed += instance.OnLookAround;
            @LookAround.canceled += instance.OnLookAround;
        }

        private void UnregisterCallbacks(IPlayerLookingActions instance)
        {
            @LookAround.started -= instance.OnLookAround;
            @LookAround.performed -= instance.OnLookAround;
            @LookAround.canceled -= instance.OnLookAround;
        }

        public void RemoveCallbacks(IPlayerLookingActions instance)
        {
            if (m_Wrapper.m_PlayerLookingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerLookingActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerLookingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerLookingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerLookingActions @PlayerLooking => new PlayerLookingActions(this);

    // TakingItem
    private readonly InputActionMap m_TakingItem;
    private List<ITakingItemActions> m_TakingItemActionsCallbackInterfaces = new List<ITakingItemActions>();
    private readonly InputAction m_TakingItem_PickItem;
    public struct TakingItemActions
    {
        private @PlayerInput m_Wrapper;
        public TakingItemActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @PickItem => m_Wrapper.m_TakingItem_PickItem;
        public InputActionMap Get() { return m_Wrapper.m_TakingItem; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TakingItemActions set) { return set.Get(); }
        public void AddCallbacks(ITakingItemActions instance)
        {
            if (instance == null || m_Wrapper.m_TakingItemActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TakingItemActionsCallbackInterfaces.Add(instance);
            @PickItem.started += instance.OnPickItem;
            @PickItem.performed += instance.OnPickItem;
            @PickItem.canceled += instance.OnPickItem;
        }

        private void UnregisterCallbacks(ITakingItemActions instance)
        {
            @PickItem.started -= instance.OnPickItem;
            @PickItem.performed -= instance.OnPickItem;
            @PickItem.canceled -= instance.OnPickItem;
        }

        public void RemoveCallbacks(ITakingItemActions instance)
        {
            if (m_Wrapper.m_TakingItemActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITakingItemActions instance)
        {
            foreach (var item in m_Wrapper.m_TakingItemActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TakingItemActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TakingItemActions @TakingItem => new TakingItemActions(this);
    public interface IPlayerMovingActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IPlayerLookingActions
    {
        void OnLookAround(InputAction.CallbackContext context);
    }
    public interface ITakingItemActions
    {
        void OnPickItem(InputAction.CallbackContext context);
    }
}
